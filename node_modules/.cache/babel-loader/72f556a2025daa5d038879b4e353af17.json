{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n  'x-rapidapi-key': '79419e7059mshe8463e19c9851aap12a31cjsn5c506c7acfe2'\n};\nconst baseUrl = 'https://coinranking1.p.rapidapi.com';\n\nconst createRequest = url => ({\n  url,\n  headers: cryptoApiHeaders\n});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl\n  }),\n  endpoints: builder => ({\n    getCryptos: builder.query({\n      query: () => createRequest('/coins')\n    })\n  })\n});\nexport const {\n  useGetCryptosQuery\n} = cryptoApi;","map":{"version":3,"sources":["/home/arnaud/developpement/react_projects/crypto_app/src/services/cryptoApi.js"],"names":["createApi","fetchBaseQuery","cryptoApiHeaders","baseUrl","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","endpoints","builder","getCryptos","query","useGetCryptosQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,MAAMC,gBAAgB,GAAG;AACrB,qBAAmB,6BADE;AAEzB,oBAAkB;AAFO,CAAzB;AAKA,MAAMC,OAAO,GAAG,qCAAhB;;AAEA,MAAMC,aAAa,GAAIC,GAAD,KAAU;AAACA,EAAAA,GAAD;AAAMC,EAAAA,OAAO,EAAEJ;AAAf,CAAV,CAAtB;;AACA,OAAO,MAAMK,SAAS,GAAGP,SAAS,CAAC;AAC/BQ,EAAAA,WAAW,EAAE,WADkB;AAE/BC,EAAAA,SAAS,EAAGR,cAAc,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAFK;AAG/BO,EAAAA,SAAS,EAAGC,OAAD,KAAc;AACrBC,IAAAA,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;AACtBA,MAAAA,KAAK,EAAE,MAAMT,aAAa,CAAC,QAAD;AADJ,KAAd;AADS,GAAd;AAHoB,CAAD,CAA3B;AAUP,OAAO,MAAM;AACTU,EAAAA;AADS,IAETP,SAFG","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst cryptoApiHeaders = {\n    'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n'x-rapidapi-key': '79419e7059mshe8463e19c9851aap12a31cjsn5c506c7acfe2'\n};\n\nconst baseUrl = 'https://coinranking1.p.rapidapi.com';\n\nconst createRequest = (url) => ({url, headers: cryptoApiHeaders})\nexport const cryptoApi = createApi({\n    reducerPath: 'cryptoApi',\n    baseQuery : fetchBaseQuery({ baseUrl}),\n    endpoints: (builder) => ({\n        getCryptos: builder.query({\n            query: () => createRequest('/coins')\n        })\n    })\n});\n\nexport const {\n    useGetCryptosQuery,\n} = cryptoApi;"]},"metadata":{},"sourceType":"module"}